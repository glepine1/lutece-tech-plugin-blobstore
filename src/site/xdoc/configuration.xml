<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>Configuration</title>
    </properties>
    <body>
        <section name="Installation">
			<p>
				Configure the private key for the signature in the file <strong>blobstore_context.xml</strong> :         
			</p>
			<div class="source">
<pre>
&lt;bean id="blobstore.hashService" class="fr.paris.lutece.util.signrequest.security.Sha1HashService" /&gt;
&lt;bean id="blobstore.requestAuthenticator" class="fr.paris.lutece.util.signrequest.RequestHashAuthenticator" &gt;
	&lt;property name="hashService" ref="blobstore.hashService" /&gt;
	&lt;property name="signatureElements" &gt; 
		&lt;list&gt;
			&lt;value&gt;blobstore&lt;/value&gt;
			&lt;value&gt;blob_key&lt;/value&gt;
		&lt;/list&gt;
	&lt;/property&gt;
	&lt;property name="privateKey"&gt;
		&lt;value&gt;<strong>change me</strong>&lt;/value&gt;
	&lt;/property&gt;
&lt;/bean&gt;
</pre>
			</div>
        </section>
        <section name="BlobStore implementation in a plugin">
        	<p>
        		The plugin-blobstore cannot run alone. It is used in addition of a plugin in which the latter will be able
        		to store big data in a distinct database or in file system.
        	</p>
        	<p>
        		Each data is linked to an ID blob which is generated randomly. The use of the library <strong>java.util.UUID</strong> 
        		ensures the unicity of the ids.
        	</p>
        	<subsection name="Step 1 : Implentation of a service that will use a BlobStoreService">
        		<p>
        			First of all, create a new service that has a private attribute type <strong>BlobStoreService</strong> :
        		</p>
<pre>
public class MyPluginService
{
    private BlobStoreService _blobStoreService;

    /**
     * Set the BlobStoreService
     * @param blobStoreService the {@link BlobStoreService}
     */
    public void setBlobStoreService( BlobStoreService blobStoreService )
    {
        _blobStoreService = blobStoreService;
    }
    .
    .
    .
}
</pre>
				<p>
					Next, define the service in the XML file of the plugin (ex : webapp/WEB-INF/plugins/myplugin_context.xml).
					It is in this file where the stored data type is defined.
				</p>
				<p>
					To store in database (modify the bold words) :
				</p>
<pre>
&lt;bean id="<strong>myplugin</strong>.blobStoreService" class="fr.paris.lutece.plugins.blobstore.service.database.DatabaseBlobStoreService"&gt;
	&lt;property name="name" value="<strong>myplugin</strong>.blobStoreService" /&gt;
&lt;/bean&gt;
&lt;bean id="<strong>myplugin.myPluginService</strong>" class="<strong>fr.paris.lutece.plugins.myplugin.service.MyPluginService</strong>"&gt;
	&lt;property name="blobStoreService" ref="<strong>myplugin</strong>.blobStoreService" /&gt;
&lt;/bean&gt;
</pre>
				<p>
					To store in file system (modify the bold words) :
				</p>
<pre>
&lt;bean id="<strong>myplugin</strong>.blobStoreService" class="fr.paris.lutece.plugins.blobstore.service.filesystem.FileSystemBlobStoreService"&gt;
	&lt;property name="name" value="&lt;strong&gt;myplugin&lt;/strong&gt;.blobStoreService" /&gt;
	&lt;property name="basePath" value="<strong>D:\data\blobstore</strong>" /&gt;
	&lt;property name="depth" value="<strong>1</strong>" /&gt;
&lt;/bean&gt;
&lt;bean id="<strong>myplugin.myPluginService</strong>" class="<strong>fr.paris.lutece.plugins.myplugin.service.MyPluginService</strong>"&gt;
	&lt;property name="blobStoreService" ref="<strong>myplugin</strong>.blobStoreService" /&gt;
&lt;/bean&gt;
</pre>
        	</subsection>
        	<subsection name="Step 2 : Implementation of basic methods of the BlobStoreService">
        		<p>
        			The API of <strong>BlobStoreService</strong> offers several functionnalities that allows to
        			implements basic operation?
        		</p>
        		<p>
        			To store a blob with an array of bytes or with an InputStream :
        		</p>
<pre>
public void storeBlob( byte[] blob )
{
	// Plugin operation
	...
	_blobStoreService.store( blob );
	...
}

public void storeBlob( InputStream blob )
{
	// Plugin operation
	...
	_blobStoreService.storeInputStream( blob );
	...
}
</pre>
        		<p>
        			To modify a blob with an array of bytes or with an InputStream :
        		</p>
<pre>
public void updateBlob( String strKey, byte[] blob )
{
	// Plugin operation
	...
	_blobStoreService.update( strKey, blob );
	...
}

public void updateBlob( String strKey, InputStream blob )
{
	// Plugin operation
	...
	_blobStoreService.updateInputStream( strKey, blob );
	...
}
</pre>
				<p>
        			To delete a blob :
        		</p>
<pre>
public void deleteBlob( String strKey )
{
	// Plugin operation
	...
	_blobStoreService.delete( strKey );
	...
}
</pre>
        		<p>
        			It is also possible to retrieve the URL to download the stored file :
        		</p>
<pre>
public String getBlobUrl( String strKey )
{
	// Plugin operation
	...
	String strBlobUrl = _blobStoreService.getBlobUrl( strKey );
	...
}

public String getFileUrl( String strKey )
{
	// Plugin operation
	...
	String strFileUrl = _blobStoreService.getFileUrl( strKey );
	...
}
</pre>
        	</subsection>
        </section>
    </body>
</document>
